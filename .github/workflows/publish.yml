name: Publish to PyPI and Docker Hub

on:
  push:
    tags:
      - v*.*.*

jobs:
  setup-version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install toml
        run: pip install toml

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(python3 -c 'import toml; print(toml.load("pyproject.toml")["tool"]["poetry"]["version"])')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  publish-to-pypi:
    needs: setup-version
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.15"

      - name: Setup Poetry
        uses: pronovic/setup-poetry@v2
        with:
          version: "1.8.0"
          plugins: "poetry-dynamic-versioning==1.2.0"
          cache-venv: "true"
          cache-poetry: "true"

      - name: Install Dependencies
        run: poetry install

      - name: PyPI Setup
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Publish Package
        run: poetry publish --build

  build-and-push:
    needs: setup-version
    name: Build and Push Multi-arch Docker Images
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: [nekro-agent, nekro-agent-sandbox]
        context: [., ./sandbox]
        dockerfile: [Dockerfile, sandbox/Dockerfile]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Multi-arch Docker Images
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}
            kromiose/${{ matrix.image }}:latest
          platforms: linux/amd64,linux/arm64

  create-manifests:
    needs: build-and-push
    name: Create and Push Multi-arch Manifest
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: [nekro-agent, nekro-agent-sandbox]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and Push Manifest
        run: |
          # Create and push latest manifest
          docker manifest create kromiose/${{ matrix.image }}:latest \
            --amend kromiose/${{ matrix.image }}:latest-amd64 \
            --amend kromiose/${{ matrix.image }}:latest-arm64
          docker manifest annotate kromiose/${{ matrix.image }}:latest \
            kromiose/${{ matrix.image }}:latest-amd64 --os linux --arch amd64
          docker manifest annotate kromiose/${{ matrix.image }}:latest \
            kromiose/${{ matrix.image }}:latest-arm64 --os linux --arch arm64
          docker manifest push kromiose/${{ matrix.image }}:latest

          # Create and push version manifest
          docker manifest create kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }} \
            --amend kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-amd64 \
            --amend kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-arm64
          docker manifest annotate kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }} \
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-amd64 --os linux --arch amd64
          docker manifest annotate kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }} \
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-arm64 --os linux --arch arm64
          docker manifest push kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}
