name: Publish to PyPI

on:
  push:
    tags:
      - v*.*.*

jobs:
  setup-version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install toml
        run: pip install toml

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(python3 -c 'import toml; print(toml.load("pyproject.toml")["tool"]["poetry"]["version"])')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish-to-pypi:
    needs: setup-version
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.15"

      - name: Setup Poetry
        uses: pronovic/setup-poetry@v2
        with:
          version: "1.8.0"
          plugins: "poetry-dynamic-versioning==1.2.0"
          cache-venv: "true"
          cache-poetry: "true"

      - name: Install Dependencies
        run: poetry install

      - name: PyPI Setup
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Publish Package
        run: poetry run publish

  build-and-push:
    needs: setup-version
    name: Build and Push ${{ matrix.image }} Image (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: [nekro-agent, nekro-agent-sandbox]
        arch: [amd64, arm64]
        include:
          - image: nekro-agent
            context: .
            dockerfile: Dockerfile
          - image: nekro-agent-sandbox
            context: ./sandbox
            dockerfile: sandbox/Dockerfile
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-${{ matrix.arch }}
            kromiose/${{ matrix.image }}:latest-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true
          build-args: |
            TARGETARCH=${{ matrix.arch }}

  create-manifests:
    needs: [setup-version, build-and-push]
    name: Create and Push Multi-arch Manifest for ${{ matrix.image }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: [nekro-agent, nekro-agent-sandbox]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and Push Manifest
        run: |
          # Get specific digests for amd64
          AMD64_DIGEST=$(docker buildx imagetools inspect kromiose/${{ matrix.image }}:latest-amd64 | grep "linux/amd64" -A 1 | grep "sha256:" | tr -d ' ' | cut -d'@' -f2)
          # Get specific digests for arm64
          ARM64_DIGEST=$(docker buildx imagetools inspect kromiose/${{ matrix.image }}:latest-arm64 | grep "linux/arm64" -A 1 | grep "sha256:" | tr -d ' ' | cut -d'@' -f2)
          
          echo "Using AMD64 digest: $AMD64_DIGEST"
          echo "Using ARM64 digest: $ARM64_DIGEST"
          
          # Create and push latest manifest using specific digests
          docker manifest create kromiose/${{ matrix.image }}:latest \
            kromiose/${{ matrix.image }}:latest-amd64@$AMD64_DIGEST \
            kromiose/${{ matrix.image }}:latest-arm64@$ARM64_DIGEST
          docker manifest push --purge kromiose/${{ matrix.image }}:latest

          # Create and push version manifest using specific digests
          docker manifest create kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }} \
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-amd64@$AMD64_DIGEST \
            kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}-arm64@$ARM64_DIGEST
          docker manifest push --purge kromiose/${{ matrix.image }}:${{ needs.setup-version.outputs.version }}
