name: Release

on:
  push:
    tags:
      - v*.*.*

jobs:
  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: pronovic/setup-poetry@v2
        with:
          version: "1.8.0"
          plugins: "poetry-dynamic-versioning==1.2.0"
          cache-venv: true
          cache-poetry: true
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
      - name: Build package
        run: poetry build
      - name: Publish package
        run: poetry run publish
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-22.04
    needs: publish-to-pypi
    strategy:
      matrix:
        target: [amd64, arm64]
        sandbox: [false, true]
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:v0.11.1-rootless
      - name: Install Python and toml (if needed)
        if: matrix.sandbox == false
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install toml (if needed)
        if: matrix.sandbox == false
        run: pip install toml
      - name: Get Version from pyproject.toml
        if: matrix.sandbox == false
        id: get_version
        run: |
          VERSION=$(python3 -c 'import toml; print(toml.load("pyproject.toml")["tool"]["poetry"]["version"])')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        id: build-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.sandbox && './sandbox' || '.' }}
          file: ${{ matrix.sandbox && 'sandbox/Dockerfile' || 'Dockerfile' }}
          platforms: linux/${{ matrix.target }}
          push: true
          tags: |
            kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:${{ env.VERSION }}-${{ matrix.target }}
            kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest-${{ matrix.target }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: |
            type=docker,dest=target/docker-manifest.json
      - name: Create Manifest List
        if: matrix.target == 'arm64'
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest
          manifests: |
            kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest:
              image: kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest-amd64
            kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest:
              image: kromiose/nekro-agent${{ matrix.sandbox && '-sandbox' || '' }}:latest-arm64
      - name: Docker Logout
        run: docker logout
